import util from 'util';
import fs from 'fs/promises';
import { exec as execCallback } from 'child_process';
import { readdirSync, statSync } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import chokidar from 'chokidar';
import WebSocket from 'ws';

const exec = util.promisify(execCallback);
const __dirname = path.dirname(fileURLToPath(import.meta.url));

const elmPath = path.resolve(process.cwd(), 'resources/elm')
const publicPath = path.resolve(process.cwd(), 'public')
const cwd = path.resolve(process.cwd(), elmPath)

/**
 |--------------------------------------------------------------------------
 | Retrieves directories with a Main.elm from a directory (recursively)
 |--------------------------------------------------------------------------
 */
const getPrograms = async (dir, allPrograms = []) => {
  const files = readdirSync(dir)

  for (let filename of files) {
    const filepath = path.resolve(dir, filename)

    if (statSync(filepath).isDirectory()) {
      await getPrograms(filepath, allPrograms)
    } else {
      allPrograms.push(filepath)
    }
  }

  return allPrograms
}

const toggleDebug = async (production) => {
  const LaravelElmPath = path.resolve(elmPath, 'laravel-elm-stuff', 'LaravelElm.elm')
  let LaravelElmContents = await fs.readFile(LaravelElmPath, 'utf8')

  const developmentDebug = '                            , sendStateToDevtools <| Debug.toString newModel.state'
  const productionDebug = '                            , Cmd.none'
  const debugRegex = /(?<=-- DEBUG_TOGGLE\n)(.*)(?=\n\s+-- END_DEBUG_TOGGLE)/gm

  if (production) {
    LaravelElmContents = LaravelElmContents.replace(
      debugRegex,
      productionDebug
    )
  } else {
    LaravelElmContents = LaravelElmContents.replace(
      debugRegex,
      developmentDebug
    )
  }

  await fs.writeFile(LaravelElmPath, LaravelElmContents)
}

/**
 |--------------------------------------------------------------------------
 | elm make
 |--------------------------------------------------------------------------
 */
const make = async (onSuccess = () => {}, debug, mode) => {
  const elmPagesDir = path.resolve(elmPath, 'pages')
  const programs = await getPrograms(elmPagesDir)
  const production = mode === 'production'
  const outputPath = path.resolve(publicPath, 'build/assets/elm.js')
  const command = `elm make ${programs.join(' ')} --output=${outputPath} ${production ? '--optimize' : ''}`

  await toggleDebug(production || !debug)

  try {
    const { stdout } = await exec(
      command,
      {
        cwd: cwd,
      }
    )
    console.log(stdout)
    await onSuccess()
  } catch (e) {
    let msg = e.message.split('\n')
    msg.shift()
    msg = msg.join('\n')
    console.error(msg)

    if (production) {
      if (e.message.includes('DEBUG REMNANTS')) {
        //
      }

      process.exit(e.code)
    }
  }

  return Promise.resolve()
}

let websocket = null
const startWS = () => {
  const wss = new WebSocket.Server({
    port: 3030,
  })

  wss.on('connection', (ws) => {
    websocket = ws
  })
}

async function writeHotFile(outputPath) {
  const elmCode = await fs.readFile(outputPath, 'utf8')
  const hmrCode = await fs.readFile(path.join(__dirname, 'hmr.js'), 'utf8')
  
  // splice in the HMR code
  const regex = /(_Platform_export\([^]*)(}\(this\)\);)/
  const match = regex.exec(elmCode)

  if (match === null) {
    throw new Error('Compiled JS from the Elm compiler is not valid.')
  }

  const injected = elmCode.slice(0, match.index) + match[1] + '\n\n' + hmrCode + '\n\n' + match[2]
  
  await fs.writeFile(outputPath, injected)
  
  return injected
}

/**
 * Vite plugin for Laravel Elm
 */
function laravelElm(options = {}) {
  const { debug = true } = options
  let config
  let watcher

  return {
    name: 'vite-plugin-laravel-elm',
    
    configResolved(resolvedConfig) {
      config = resolvedConfig
    },

    async buildStart() {
      // Ensure build directory exists
      const buildDir = path.resolve(publicPath, 'build/assets')
      await fs.mkdir(buildDir, { recursive: true })
      
      // Compile Elm on build start
      await make(async () => {
        const outputPath = path.resolve(publicPath, 'build/assets/elm.js')
        
        if (config.mode === 'development' && debug) {
          await writeHotFile(outputPath)
        }
        
        // Copy compiled Elm to the resources/js directory for Vite to process
        const elmJsPath = path.resolve(process.cwd(), 'resources/js/elm.js')
        const compiledElm = await fs.readFile(outputPath, 'utf8')
        
        // Create a proper ES module that exports the Elm object
        const moduleContent = `// Auto-generated by Laravel Elm Vite plugin
// Create a proper context for the Elm IIFE
const elmContext = {};

// Execute the Elm IIFE with proper context
${compiledElm.replace(/\(function\(scope\)\{/, '(function(scope) {').replace(/\}\(this\)\);$/, '}(elmContext));')}

// Make Elm available globally and as module export
if (typeof window !== 'undefined') {
  window.Elm = elmContext.Elm || elmContext;
}

export default elmContext.Elm || elmContext;`
        
        await fs.writeFile(elmJsPath, moduleContent)
      }, debug, config.mode)
    },

    configureServer(server) {
      if (debug) {
        startWS()
      }

      // Watch Elm files for changes
      watcher = chokidar.watch(
        elmPath, {
          ignored: [
            '**/elm-stuff/**/*',
            '**/laravel-elm-stuff/LaravelElm.elm',
          ],
          ignoreInitial: true
        }
      )

      watcher.on('all', async () => {
        const outputPath = path.resolve(publicPath, 'build/assets/elm.js')
        
        await make(async () => {
          if (debug) {
            const injected = await writeHotFile(outputPath)
            
            if (websocket) {
              websocket.send(injected)
            }
          }
          
          // Copy compiled Elm to the resources/js directory for Vite to process
          const elmJsPath = path.resolve(process.cwd(), 'resources/js/elm.js')
          const compiledElm = await fs.readFile(outputPath, 'utf8')
          
          // Create a proper ES module that exports the Elm object
          const moduleContent = `// Auto-generated by Laravel Elm Vite plugin
// Create a proper context for the Elm IIFE
const elmContext = {};

// Execute the Elm IIFE with proper context
${compiledElm.replace(/\(function\(scope\)\{/, '(function(scope) {').replace(/\}\(this\)\);$/, '}(elmContext));')}

// Make Elm available globally and as module export
if (typeof window !== 'undefined') {
  window.Elm = elmContext.Elm || elmContext;
}

export default elmContext.Elm || elmContext;`
          
          await fs.writeFile(elmJsPath, moduleContent)
        }, debug, config.mode)

        // Trigger Vite HMR
        server.ws.send({
          type: 'full-reload'
        })
      })
    },

    closeBundle() {
      if (watcher) {
        watcher.close()
      }
    }
  }
}

export default laravelElm;